import org.ccil.cowan.tagsoup.Parser
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

/*
 * Copyright Â© 2020 NHSX. All rights reserved.
 */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: "$rootDir/ktlint.gradle"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments = ["package": "uk.nhs.nhsx.sonar"]
    }
    buildTypes {
        staging {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging.exceptionFormat = TestExceptionFormat.FULL
            testLogging.showStandardStreams = true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

task("outputInstrumentationErrors") {
    doFirst {
        def reportsDir = "$buildDir/reports/androidTests/connected"
        def htmlFiles = fileTree(dir: reportsDir, include: "*.html").getFiles()
        def slurper = new XmlSlurper(new Parser())

        htmlFiles
            .collectMany { file ->
                def html = slurper.parse(file)
                html.'**'.findAll { node -> node.name() == 'pre' }*.text()
            }
            .each { stacktrace ->
                System.err.println("\n==============================\n$stacktrace==============================\n")
            }
    }
}

afterEvaluate {
    tasks["connectedDebugAndroidTest"].finalizedBy("outputInstrumentationErrors")
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.volley:volley:1.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    api 'net.danlew:android.joda:2.10.3'

    implementation 'com.google.dagger:dagger:2.27'
    kapt 'com.google.dagger:dagger-compiler:2.27'

    testImplementation 'junit:junit:4.13'
    testImplementation 'org.json:json:20190722'
    testImplementation 'org.assertj:assertj-core:3.15.0'
    testImplementation 'io.mockk:mockk:1.9.3'
    testRuntimeOnly 'net.bytebuddy:byte-buddy:1.10.8' // https://github.com/mockk/mockk/issues/397

    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.25.1'

    // have to use 3.x.x version since Firebase crashlytics doesn't work with 4.x.x
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.14.7'
    androidTestImplementation 'com.squareup.okhttp3:okhttp-tls:3.14.7'

    androidTestImplementation 'org.assertj:assertj-core:3.15.0'
    androidTestImplementation 'org.awaitility:awaitility-kotlin:3.1.6'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
